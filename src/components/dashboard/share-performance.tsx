"use client";

import { useRef, useState } from 'react';
import * as htmlToImage from 'html-to-image';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogTrigger,
} from '@/components/ui/dialog';
import type { Trade } from '@/lib/types';
import { Loader2, Share2, Download } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useTheme } from 'next-themes';
import { StatsCards } from './stats-cards';
import { PerformanceRadarChart } from './performance-radar-chart';
import { Logo } from '../logo';
import { format } from 'date-fns';

export function SharePerformance({ trades }: { trades: Trade[] }) {
  const [isOpen, setIsOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();
  const { resolvedTheme } = useTheme();
  const imageRef = useRef<HTMLDivElement>(null);

  const handleDownloadImage = async () => {
    if (!imageRef.current) {
        toast({
            variant: "destructive",
            title: "Error",
            description: "Could not find the content to share.",
        });
        return;
    }

    setIsLoading(true);
    try {
        const bgColor = resolvedTheme === 'dark' ? '#000000' : '#ffffff';
        const dataUrl = await htmlToImage.toJpeg(imageRef.current, { 
            cacheBust: true,
            pixelRatio: 2, // for higher quality
            backgroundColor: bgColor,
            quality: 0.95,
        });

        // Create a link and trigger download
        const link = document.createElement('a');
        const date = format(new Date(), 'yyyy-MM-dd');
        link.download = `anony-trading-performance-${date}.jpeg`;
        link.href = dataUrl;
        link.click();
        
        toast({
            title: "Image Downloaded",
            description: "Your performance summary has been saved.",
        });
        setIsOpen(false);

    } catch (error) {
        console.error("Failed to generate image:", error);
        toast({
            variant: "destructive",
            title: "Image Generation Failed",
            description: "An error occurred while creating the image. Please try again.",
        });
    } finally {
        setIsLoading(false);
    }
  };

  return (
    <>
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogTrigger asChild>
            <Button variant="outline">
                <Share2 className="mr-2 h-4 w-4" />
                Share
            </Button>
        </DialogTrigger>
        <DialogContent className="sm:max-w-4xl">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
                <Share2 className="h-5 w-5 text-primary"/>
                Share Performance
            </DialogTitle>
            <DialogDescription>
              Download a snapshot of your current performance metrics to share with others.
            </DialogDescription>
          </DialogHeader>
          
          <div className="border rounded-lg p-4 max-h-[60vh] overflow-y-auto">
            <div ref={imageRef} className="bg-background p-8 space-y-8">
                <div className="flex justify-between items-center">
                    <Logo />
                    <p className="text-sm text-muted-foreground">Performance Snapshot</p>
                </div>
                <StatsCards trades={trades} />
                <PerformanceRadarChart trades={trades} />
                 <p className="text-center text-xs text-muted-foreground pt-4">
                    Generated by Anony Trading on {format(new Date(), 'PPP')}
                </p>
            </div>
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsOpen(false)}>Cancel</Button>
            <Button onClick={handleDownloadImage} disabled={isLoading}>
                {isLoading ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                    <Download className="mr-2 h-4 w-4" />
                )}
                {isLoading ? "Generating..." : "Download as Image"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}
